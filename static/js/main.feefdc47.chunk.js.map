{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["READY","LOADING","ERROR","REPO_SEARCH","RepoListItem","_this$props","this","props","name","owner","description","onClick","repoPath","concat","login","react_default","a","createElement","title","href","Component","RepoDetail","_this$props2","html_url","stargazers_count","watchers_count","forks_count","onClickIssues","target","RepoIssues","_this$props3","issues","total","closed","onClickFilter","open","App_PieChart","data","label","value","color","map","i","key","id","PieChart","_this","ref","canvas","Chart","getContext","Pie","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","query","mode","repos","repo","loadState","executeQueryNow","setState","q","split","fetch","then","resp","json","items","catch","err","errorDetail","stack","executeQuery","debounce","e","_this3","totalIssues","total_count","closedIssues","open_issues_count","_this4","length","suffix","_this5","className","type","style","margin","width","placeholder","onChange","queryChanged","renderBody","renderContent","_this6","r","App_RepoListItem","assign","selectRepo","App_RepoDetail","repoIssues","App_RepoIssues","filterIssues","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.feefdc47.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { debounce } from 'debounce';\nimport * as Chart from \"chart.js\";\nimport './App.css';\n\nconst READY = 0;\nconst LOADING = 1;\nconst ERROR = 1;\n\nconst REPO_SEARCH = 0;\nconst REPO_DETAIL = 1;\nconst REPO_ISSUES = 2;\n\nclass RepoListItem extends Component {\n  render() {\n    const { name, owner, description, onClick } = this.props;\n    let repoPath = `${owner.login}/${name}`\n    return <li title={description}>\n      <a href={`#/${repoPath}`} onClick={onClick}>{repoPath}</a>\n    </li>\n  }\n}\n\nclass RepoDetail extends Component {\n  render() {\n    const { name, html_url, owner, stargazers_count, watchers_count, forks_count, description, onClickIssues } = this.props;\n    let repoPath = `${owner.login}/${name}`\n    return <div>\n      <a target=\"blank\" href={html_url}>External Link</a>\n      <h3>{owner.login}/{name}</h3>\n      <p>{ description }</p>\n      <p>Stars: { stargazers_count }</p>\n      <p>Watchers: { watchers_count }</p>\n      <p>Forks: { forks_count }</p>\n      <a href={`#/${repoPath}/issues`} onClick={onClickIssues}>Issues</a>\n    </div>\n  }\n}\n\nclass RepoIssues extends Component {\n  render() {\n    const { issues, total, closed, onClickFilter } = this.props;\n    const open = total - closed;\n    if (issues) {\n      return <div>\n        <PieChart data={[\n          {\n            label: \"Open\",\n            value: open,\n            color: 'red',\n          },\n          { \n            label: \"Closed\",\n            value: closed,\n            color: 'green',\n          }\n        ]} />\n        <button onClick={()=>onClickFilter('')}>All</button>\n        <button onClick={()=>onClickFilter('open')}>Open</button>\n        <button onClick={()=>onClickFilter('closed')}>Closed</button>\n        { issues.map((i)=><li key={i.id}>\n          <a target=\"blank\" href={i.html_url}>{i.title}</a>\n        </li>) }\n      </div>\n    } else {\n      return null\n    }\n  }\n}\n\nclass PieChart extends Component {\n  render() {\n    return <div><canvas ref={(canvas)=>{\n      if (canvas) {\n        new Chart(canvas.getContext('2d')).Pie(this.props.data)\n      }\n    }}/></div>\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: '',\n      mode: REPO_SEARCH,\n      repos: [],\n      repo: null,\n      repoPath: '',\n      loadState: READY\n    }\n    this.executeQueryNow = ()=>{\n      this.setState({ loadState: LOADING });\n      let q = this.state.query.split(':')[0];\n      this.setState({ mode: REPO_SEARCH, repos: [], repo: null });\n      fetch(`https://api.github.com/search/repositories?q=${q}`)\n        .then((resp) => resp.json())\n        .then((data)=>{\n          this.setState({ loadState: READY, repos: data.items });\n        })\n        .catch((err)=>{\n          this.setState({ loadState: ERROR, errorDetail: err.stack });\n        })\n    }\n    this.executeQuery = debounce(this.executeQueryNow, 500)\n  }\n  queryChanged(e) {\n    let query = e.target.value;\n    this.setState({ query });\n    this.executeQuery();\n  }\n  selectRepo(repo) {\n    let repoPath = `${repo.owner.login}/${repo.name}`\n    this.setState({ mode: REPO_DETAIL, repoPath, query: repoPath, repo: repo })\n  }\n  repoIssues() {\n    let repo = this.state.repo;\n    let repoPath = this.state.repoPath;\n    this.setState({ query: this.state.repoPath+':issues', loadState: LOADING })\n    fetch(`https://api.github.com/search/issues?q=repo:${repoPath}+type:issue`)\n      .then((resp) => resp.json())\n      .then((data)=>{\n        this.setState({ mode: REPO_ISSUES, loadState: READY,\n          issues: data.items,\n          totalIssues: data.total_count,\n          closedIssues: data.total_count - repo.open_issues_count\n        });\n      })\n      .catch((err)=>{\n        this.setState({ loadState: ERROR, errorDetail: err.stack });\n      })\n  }\n  filterIssues(state) {\n    let split = this.state.query.split(':');\n    if (split.length === 2 && state === '') return;\n    else if (split.length > 2 && split[2] === state) return;\n    let { repoPath } = this.state\n    let suffix = '';\n    let query = repoPath+':issues';\n    if (state.length > 0) {\n      suffix += '+state:'+state;\n      query += ':'+state;\n    }\n    this.setState({ query, loadState: LOADING })\n    fetch(`https://api.github.com/search/issues?q=repo:${repoPath}+type:issue${suffix}`)\n      .then((resp) => resp.json())\n      .then((data)=>{\n        this.setState({ loadState: READY, issues: data.items });\n      })\n      .catch((err)=>{\n        this.setState({ loadState: ERROR, errorDetail: err.stack });\n      })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" style={{margin:'50px', width: '300px'}} placeholder=\"Search repositories...\" value={this.state.query} onChange={(e)=>this.queryChanged(e)} />\n        { this.renderBody() }\n      </div>\n    );\n  }\n  renderBody() {\n    switch (this.state.loadState) {\n      case LOADING:\n        return <p>Loading...</p>\n      case ERROR:\n        return <pre>{this.state.errorDetail}</pre>\n      case READY:\n        return this.renderContent();\n      default:\n        return null\n    }\n  }\n  renderContent() {\n    switch (this.state.mode) {\n      case REPO_SEARCH:\n        return <ul>\n          { this.state.repos.map((r)=><RepoListItem {...r} key={r.id} onClick={()=>this.selectRepo(r)}/>) }\n        </ul>\n      case REPO_DETAIL: \n        return <RepoDetail {...this.state.repo} onClickIssues={()=>this.repoIssues()} />\n      case REPO_ISSUES: \n        return <RepoIssues issues={this.state.issues} total={this.state.totalIssues} closed={this.state.closedIssues} onClickFilter={(a)=>this.filterIssues(a)}/>\n      default:\n        return null\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}